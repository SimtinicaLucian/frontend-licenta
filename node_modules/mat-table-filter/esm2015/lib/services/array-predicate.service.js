var ArrayPredicateService_1;
import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { FilterPredicate } from './filter-predicate';
import * as LODASH from 'lodash';
import * as i0 from "@angular/core";
let ArrayPredicateService = ArrayPredicateService_1 = class ArrayPredicateService extends FilterPredicate {
    constructor() {
        super();
    }
    static warn() {
        console.warn(ArrayPredicateService_1.UNSUPPORTED_OPERATION_WARNING);
        console.warn(ArrayPredicateService_1.SUGGESTION_WARNING);
    }
    equals(itemPair) {
        return LODASH.isEqual(itemPair.example.sort(), itemPair.item.sort());
    }
    anywhere(itemPair) {
        return this.isSubset(itemPair.example, itemPair.item);
    }
    startsWith(itemPair) {
        ArrayPredicateService_1.warn();
        return this.anywhere(itemPair);
    }
    endsWith(itemPair) {
        ArrayPredicateService_1.warn();
        return this.anywhere(itemPair);
    }
    isSubset(example, item) {
        return !LODASH.difference(LODASH.flatten(example), LODASH.flatten(item)).length;
    }
};
// tslint:disable-next-line:max-line-length
ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';
ArrayPredicateService.SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';
ArrayPredicateService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ArrayPredicateService_Factory() { return new ArrayPredicateService(); }, token: ArrayPredicateService, providedIn: "root" });
ArrayPredicateService = ArrayPredicateService_1 = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], ArrayPredicateService);
export { ArrayPredicateService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktcHJlZGljYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXQtdGFibGUtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2FycmF5LXByZWRpY2F0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxLQUFLLE1BQU0sTUFBTSxRQUFRLENBQUM7O0FBTWpDLElBQWEscUJBQXFCLDZCQUFsQyxNQUFhLHFCQUFzQixTQUFRLGVBQTJCO0lBS3BFO1FBQ0UsS0FBSyxFQUFFLENBQUM7SUFDVixDQUFDO0lBRU8sTUFBTSxDQUFDLElBQUk7UUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBcUIsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQThCO1FBQzFDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBQ00sUUFBUSxDQUFDLFFBQThCO1FBQzVDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ00sVUFBVSxDQUFDLFFBQThCO1FBQzlDLHVCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ00sUUFBUSxDQUFDLFFBQThCO1FBQzVDLHVCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sUUFBUSxDQUFDLE9BQW1CLEVBQUUsSUFBZ0I7UUFDcEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2xGLENBQUM7Q0FFRixDQUFBO0FBL0JDLDJDQUEyQztBQUNuQixtREFBNkIsR0FBRyw4RkFBOEYsQ0FBQztBQUMvSCx3Q0FBa0IsR0FBRyxnRkFBZ0YsQ0FBQzs7QUFKbkgscUJBQXFCO0lBSGpDLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7O0dBQ1cscUJBQXFCLENBaUNqQztTQWpDWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlclByZWRpY2F0ZSB9IGZyb20gJy4vZmlsdGVyLXByZWRpY2F0ZSc7XHJcbmltcG9ydCAqIGFzIExPREFTSCBmcm9tICdsb2Rhc2gnO1xyXG5pbXBvcnQgeyBJdGVtUGFpciB9IGZyb20gJy4uL2l0ZW0tcGFpcic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBcnJheVByZWRpY2F0ZVNlcnZpY2UgZXh0ZW5kcyBGaWx0ZXJQcmVkaWNhdGU8QXJyYXk8YW55Pj4ge1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVU5TVVBQT1JURURfT1BFUkFUSU9OX1dBUk5JTkcgPSAnVGhpcyBmaWx0ZXJUeXBlIGlzIHVuc3VwcG9ydGVkIGZvciBhcnJheSBmaWx0ZXJpbmcuIEZpbHRlclR5cGUuQU5ZV0hFUkUgaXMgZXhlY3V0ZWQgaW5zdGVhZCEnO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNVR0dFU1RJT05fV0FSTklORyA9ICdZb3UgY2FuIHNldCBhIGN1c3RvbSBwcmVkaWNhdGUgZm9yIHRoZSBhcnJheSBwcm9wZXJ0eSB0aHJvdWdoIFByb3BlcnR5T3B0aW9ucyEnO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHdhcm4oKSB7XHJcbiAgICBjb25zb2xlLndhcm4oQXJyYXlQcmVkaWNhdGVTZXJ2aWNlLlVOU1VQUE9SVEVEX09QRVJBVElPTl9XQVJOSU5HKTtcclxuICAgIGNvbnNvbGUud2FybihBcnJheVByZWRpY2F0ZVNlcnZpY2UuU1VHR0VTVElPTl9XQVJOSU5HKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlcXVhbHMoaXRlbVBhaXI6IEl0ZW1QYWlyPEFycmF5PGFueT4+KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gTE9EQVNILmlzRXF1YWwoaXRlbVBhaXIuZXhhbXBsZS5zb3J0KCksIGl0ZW1QYWlyLml0ZW0uc29ydCgpKTtcclxuICB9XHJcbiAgcHVibGljIGFueXdoZXJlKGl0ZW1QYWlyOiBJdGVtUGFpcjxBcnJheTxhbnk+Pik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNTdWJzZXQoaXRlbVBhaXIuZXhhbXBsZSwgaXRlbVBhaXIuaXRlbSk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGFydHNXaXRoKGl0ZW1QYWlyOiBJdGVtUGFpcjxBcnJheTxhbnk+Pik6IGJvb2xlYW4ge1xyXG4gICAgQXJyYXlQcmVkaWNhdGVTZXJ2aWNlLndhcm4oKTtcclxuICAgIHJldHVybiB0aGlzLmFueXdoZXJlKGl0ZW1QYWlyKTtcclxuICB9XHJcbiAgcHVibGljIGVuZHNXaXRoKGl0ZW1QYWlyOiBJdGVtUGFpcjxBcnJheTxhbnk+Pik6IGJvb2xlYW4ge1xyXG4gICAgQXJyYXlQcmVkaWNhdGVTZXJ2aWNlLndhcm4oKTtcclxuICAgIHJldHVybiB0aGlzLmFueXdoZXJlKGl0ZW1QYWlyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNTdWJzZXQoZXhhbXBsZTogQXJyYXk8YW55PiwgaXRlbTogQXJyYXk8YW55Pik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICFMT0RBU0guZGlmZmVyZW5jZShMT0RBU0guZmxhdHRlbihleGFtcGxlKSwgTE9EQVNILmZsYXR0ZW4oaXRlbSkpLmxlbmd0aDtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==