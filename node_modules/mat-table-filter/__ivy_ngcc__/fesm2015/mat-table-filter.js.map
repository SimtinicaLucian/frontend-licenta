{"version":3,"file":"mat-table-filter.js","sources":["ng:/mat-table-filter/lib/mat-table-filter.enum.ts","ng:/mat-table-filter/lib/services/filter-predicate.ts","ng:/mat-table-filter/lib/services/array-predicate.service.ts","ng:/mat-table-filter/lib/services/alpha-numeric-predicate.service.ts","ng:/mat-table-filter/lib/services/mat-table-filter.service.ts","ng:/mat-table-filter/lib/mat-table-filter.directive.ts","ng:/mat-table-filter/lib/mat-table-filter.module.ts","ng:/mat-table-filter/public-api.ts","ng:/mat-table-filter/mat-table-filter.ts"],"names":["LODASH.isString","LODASH.isEqual","LODASH.difference","LODASH.flatten","LODASH.cloneDeep","LODASH.isNil","LODASH.every","LODASH.isEmpty","LODASH.isArray","LODASH.isBoolean","LODASH.isNumber"],"mappings":"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","sourcesContent":["export enum MatTableFilter {\r\n  EQUALS = 'EQUALS',\r\n  ANYWHERE = 'ANYWHERE',\r\n  STARTS_WITH = 'STARTS_WITH',\r\n  ENDS_WITH = 'ENDS_WITH'\r\n}\r\n","import { MatTableFilter } from '../mat-table-filter.enum';\r\nimport { ItemPair } from '../item-pair';\r\nimport * as LODASH from 'lodash';\r\nimport { Options } from '../options';\r\n\r\nexport abstract class FilterPredicate<T> {\r\n\r\n  public abstract equals(itemPair: ItemPair<T>): boolean;\r\n  public abstract anywhere(itemPair: ItemPair<T>): boolean;\r\n  public abstract startsWith(itemPair: ItemPair<T>): boolean;\r\n  public abstract endsWith(itemPair: ItemPair<T>): boolean;\r\n\r\n  public executeCondition(itemPair: ItemPair<T>, options: Options): boolean {\r\n    this.handleLetterCasing(itemPair, options.caseSensitive);\r\n    switch (options.filterType) {\r\n      case MatTableFilter.EQUALS:\r\n        return this.equals(itemPair);\r\n      case MatTableFilter.ANYWHERE:\r\n        return this.anywhere(itemPair);\r\n      case MatTableFilter.STARTS_WITH:\r\n        return this.startsWith(itemPair);\r\n      case MatTableFilter.ENDS_WITH:\r\n        return this.endsWith(itemPair);\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  private handleLetterCasing(itemPair: ItemPair<any>, caseSensitive: boolean): void {\r\n    if (!caseSensitive) {\r\n      this.transformAllLowerCase(itemPair);\r\n    }\r\n  }\r\n\r\n  private transformAllLowerCase(object: any) {\r\n    // tslint:disable-next-line:forin\r\n    for (const key in object) {\r\n      const value = object[key];\r\n      if (LODASH.isString(value)) {\r\n        object[key] = value.toLowerCase();\r\n      } else {\r\n        this.transformAllLowerCase(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FilterPredicate } from './filter-predicate';\r\nimport * as LODASH from 'lodash';\r\nimport { ItemPair } from '../item-pair';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ArrayPredicateService extends FilterPredicate<Array<any>> {\r\n\r\n  // tslint:disable-next-line:max-line-length\r\n  private static readonly UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';\r\n  private static readonly SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  private static warn() {\r\n    console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);\r\n    console.warn(ArrayPredicateService.SUGGESTION_WARNING);\r\n  }\r\n\r\n  public equals(itemPair: ItemPair<Array<any>>): boolean {\r\n    return LODASH.isEqual(itemPair.example.sort(), itemPair.item.sort());\r\n  }\r\n  public anywhere(itemPair: ItemPair<Array<any>>): boolean {\r\n    return this.isSubset(itemPair.example, itemPair.item);\r\n  }\r\n  public startsWith(itemPair: ItemPair<Array<any>>): boolean {\r\n    ArrayPredicateService.warn();\r\n    return this.anywhere(itemPair);\r\n  }\r\n  public endsWith(itemPair: ItemPair<Array<any>>): boolean {\r\n    ArrayPredicateService.warn();\r\n    return this.anywhere(itemPair);\r\n  }\r\n\r\n  private isSubset(example: Array<any>, item: Array<any>): boolean {\r\n    return !LODASH.difference(LODASH.flatten(example), LODASH.flatten(item)).length;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FilterPredicate } from './filter-predicate';\r\nimport { ItemPair } from '../item-pair';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AlphaNumericPredicateService extends FilterPredicate<string> {\r\n\r\n  constructor() {\r\n    super();\r\n   }\r\n\r\n  public equals(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.example === itemPair.item;\r\n  }\r\n  public anywhere(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.includes(itemPair.example);\r\n  }\r\n  public startsWith(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.startsWith(itemPair.example);\r\n  }\r\n  public endsWith(itemPair: ItemPair<string>): boolean {\r\n    return itemPair.item.endsWith(itemPair.example);\r\n  }\r\n\r\n}\r\n","import { PropertyOptions, PredicateFunc } from '../property-options';\r\nimport { ItemPair } from './../item-pair';\r\nimport { ArrayPredicateService } from './array-predicate.service';\r\nimport { AlphaNumericPredicateService } from './alpha-numeric-predicate.service';\r\nimport { Injectable } from '@angular/core';\r\nimport * as LODASH from 'lodash';\r\nimport { Options } from '../options';\r\nimport { isFunction } from 'util';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MatTableFilterService {\r\n  constructor(private _alphaNumericService: AlphaNumericPredicateService, private _arrayService: ArrayPredicateService) {}\r\n\r\n  public filterPredicate(itemPair: ItemPair<any>, propertyOptions: PropertyOptions,\r\n                         commonOptions: Options | PredicateFunc, propertyName?: string): boolean {\r\n    // tslint:disable-next-line:forin\r\n    const exampleKeys = Object.keys(itemPair.example);\r\n    for (const key of exampleKeys) {\r\n      const exampleValue = LODASH.cloneDeep(itemPair.example[key]);\r\n      if (LODASH.isNil(exampleValue) || LODASH.every(exampleValue, LODASH.isEmpty) && typeof exampleValue !== 'boolean') {\r\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\r\n        continue;\r\n      }\r\n      if (itemPair.item.hasOwnProperty(key)) {\r\n        // if example entity has additional columns then search fails\r\n        const itemValue = LODASH.cloneDeep(itemPair.item[key]);\r\n        const nextPropertyName = this.getNextPropertyName(propertyName, key);\r\n        const options = this.finalizeOptionsForProperty(commonOptions, propertyOptions, nextPropertyName);\r\n        if (isFunction(options)) { // if user defined predicate is present for property\r\n          const customPredicate = options as PredicateFunc;\r\n          if (!customPredicate(itemValue)) {\r\n            return false;\r\n          }\r\n        } else {\r\n          const columnOptions = options as Options;\r\n          if (this.isAlphaNumeric(itemValue)) {\r\n            const valuePair: ItemPair<string> = {item: itemValue.toString(), example: exampleValue};\r\n            if (!this._alphaNumericService.executeCondition(valuePair, columnOptions)) {\r\n              return false;\r\n            }\r\n          } else if (LODASH.isArray(itemValue)) {\r\n            const valuePair: ItemPair<any[]> = {item: itemValue, example: exampleValue};\r\n            if (!this._arrayService.executeCondition(valuePair, columnOptions)) {\r\n              return false;\r\n            }\r\n          } else if (LODASH.isBoolean(itemValue)) {\r\n            if (itemValue !== exampleValue) {\r\n              return false;\r\n            }\r\n          } else {\r\n            const valuePair: ItemPair<any> = {item: itemValue, example: exampleValue};\r\n            if (!this.filterPredicate(valuePair, propertyOptions, options, nextPropertyName)) {\r\n              // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\r\n              // however if it returns false then the item must not be in the list\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private finalizeOptionsForProperty(commonOptions: Options | PredicateFunc, propertyOptions: PropertyOptions, propertyName: string):\r\n   Options | PredicateFunc {\r\n    if (propertyOptions && propertyOptions.hasOwnProperty(propertyName)) {\r\n      return propertyOptions[propertyName];\r\n    } else {\r\n      return commonOptions;\r\n    }\r\n  }\r\n\r\n  private getNextPropertyName(propertyName: string, key: string): string {\r\n    return propertyName ? (propertyName + '.' + key) : key;\r\n  }\r\n\r\n  public isChanged(oldEntity: any, newEntity: any): boolean {\r\n    return !LODASH.isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\r\n  }\r\n\r\n  public toPlainJson(object: any): JSON {\r\n    if (object) {\r\n      return JSON.parse(JSON.stringify(object));\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private isAlphaNumeric(value: any): boolean {\r\n    return LODASH.isString(value) || LODASH.isNumber(value);\r\n  }\r\n}\r\n","import { PropertyOptions } from './property-options';\r\nimport { Directive, DoCheck, Input, ViewContainerRef, Host, Self, Optional } from '@angular/core';\r\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatTableFilter } from './mat-table-filter.enum';\r\nimport { MatTableFilterService } from './services/mat-table-filter.service';\r\n\r\n@Directive({\r\n  selector: '[matTableFilter]',\r\n  exportAs: 'matTableFilter'\r\n})\r\nexport class MatTableFilterDirective implements DoCheck {\r\n  private _oldExampleEntity: any;\r\n\r\n  @Input() exampleEntity: any;\r\n\r\n  /**\r\n   * in millis\r\n   */\r\n  @Input() debounceTime = 400;\r\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\r\n  @Input() caseSensitive = false;\r\n  @Input() customPredicate: (data: any) => boolean;\r\n  @Input() propertyOptions: PropertyOptions;\r\n  private _exampleEntitySubject: BehaviorSubject<void>;\r\n\r\n\r\n  constructor(\r\n    private _filterService: MatTableFilterService,\r\n    @Host() @Self() @Optional() private _table: MatTable<any>\r\n  ) {\r\n    this.initDebounceSubject();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\r\n      this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\r\n      this._exampleEntitySubject.next(undefined);\r\n    }\r\n  }\r\n\r\n\r\n  private initDebounceSubject() {\r\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\r\n    this._exampleEntitySubject.pipe(\r\n      debounceTime(this.debounceTime))\r\n      .subscribe(_ => {\r\n        this.updateFilterPredicate();\r\n      });\r\n  }\r\n\r\n  private updateFilterPredicate() {\r\n    const matDataSource = this.getMatDataSource();\r\n    if (matDataSource) {\r\n      matDataSource.filterPredicate = this.getFilterPredicate();\r\n      matDataSource.filter = this.exampleEntity as any;\r\n    }\r\n  }\r\n\r\n  private getFilterPredicate() {\r\n    if (this.customPredicate) {\r\n      return this.customPredicate;\r\n    } else {\r\n      return (item: any): boolean => {\r\n        return this._filterService.filterPredicate({ example: this.exampleEntity, item }, this.propertyOptions,\r\n          { filterType: this.filterType, caseSensitive: this.caseSensitive });\r\n      };\r\n    }\r\n  }\r\n\r\n  private getMatDataSource(): MatTableDataSource<any> {\r\n    const matTable = this._table as MatTable<any>;\r\n    return (matTable.dataSource as MatTableDataSource<any>);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\r\n\r\n@NgModule({\r\n  declarations: [MatTableFilterDirective],\r\n  imports: [\r\n    MatTableModule\r\n  ],\r\n  exports: [MatTableFilterDirective]\r\n})\r\nexport class MatTableFilterModule { }\r\n","\r\n\r\n/*\r\n * Public API Surface of mat-table-filter\r\n */\r\nexport * from './lib/mat-table-filter.module';\r\nexport { MatTableFilterService } from './lib/services/mat-table-filter.service';\r\nexport { MatTableFilter } from './lib/mat-table-filter.enum';\r\nexport { Options } from './lib/options';\r\nexport * from './lib/property-options';\r\nexport { MatTableFilterDirective } from './lib/mat-table-filter.directive';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AlphaNumericPredicateService as Éµa} from './lib/services/alpha-numeric-predicate.service';\nexport {ArrayPredicateService as Éµc} from './lib/services/array-predicate.service';\nexport {FilterPredicate as Éµb} from './lib/services/filter-predicate';"]}